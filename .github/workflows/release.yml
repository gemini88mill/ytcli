name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'   # Trigger on tags like v1.0.0
      - '*.*.*'    # Also allow tags without 'v' prefix like 1.0.0
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            rid: win-x64
            artifact_name: ytcli-win-x64
            ext: .exe
          - os: ubuntu-latest
            rid: linux-x64
            artifact_name: ytcli-linux-x64
            ext: ''
          - os: macos-latest
            rid: osx-x64
            artifact_name: ytcli-osx-x64
            ext: ''
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore
        run: dotnet restore

      - name: Publish
        run: >
          dotnet publish ytcli.csproj
          --configuration Release
          --runtime ${{ matrix.rid }}
          --self-contained true
          --output ./out/${{ matrix.artifact_name }}
          /p:PublishSingleFile=true
          /p:IncludeNativeLibrariesForSelfExtracted=true

      - name: Archive (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $outDir = Join-Path $PWD "out/${{ matrix.artifact_name }}"
          Write-Host "Archiving Windows output from $outDir"
          Compress-Archive -Path "$outDir/*" -DestinationPath "${{ matrix.artifact_name }}.zip" -Force

      - name: Archive (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          set -euo pipefail
          cd "./out/${{ matrix.artifact_name }}"
          if [ -f "ytcli${{ matrix.ext }}" ]; then
            chmod +x "ytcli${{ matrix.ext }}"
          fi
          zip -r "../../${{ matrix.artifact_name }}.zip" .
          cd - >/dev/null

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}.zip
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*.zip
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
